"""
tools for including notebooks in version control
================================================

workflow for files excluding notebooks
    edit locally
    pycharm autouploads to the server
    master copy is local and in git repo

workflow for notebooks
    run/edit notebooks on the server
    jupytext creates linked .py files on the server. These exclude the cell outputs.
    master copy is on the server until manually downloaded

    manually download the linked .py files
    master copy is now local and in git repo
"""

from pathlib import Path
from glob import glob
import fabric.api as fab
import subprocess
import yaml
import os

##### local #############################################################

def nb2py(path):
    """ create .py file for every notebook in path
    """
    path = Path(path)/"**/*.ipynb"
    nbs = glob(path, recursive=True)
    nbs = [nb for nb in nbs if nb.find(".ipynb_checkpoints") < 0]
    for nb in nbs:
        subprocess.run(f"jupytext --to py:light {nb}")

def py2nb(path):
    """ create .ipynb file for each .py that was generated by jupytext
    path can be list of files, single file or directory
    """
    if isinstance(path, list):
        # list of files
        pass
    elif os.path.isfile(path):
        # single file
        path = [path]
    else:
        # directory
        path = Path(path)/"**/*.py"
    pys = [f for f in glob(path, recursive=True) if is_jupytext(f)]
    for py in pys:
        subprocess.run(f"jupytext --to ipynb {py}")

def rm_nb(path):
    """ cleanup local folders by deleting ipynb files where linked .py exists """
    path = Path(path) / "**/*.ipynb"
    nbs = [nb for nb in glob(path) if nb.find(".ipynb_checkpoints") < 0]
    for nb in nbs:
        py = os.path.splitext(nb)[0] + ".py"
        if os.path.exists(py) and is_jupytext(py):
            os.remove(nb)

def is_jupytext(filename):
    " return True if file was created by jupytext. used to determine whether to create a notebook "
    with open(filename) as f:
        try:
            content = f.read()
            content = content.split("# ---")[1].replace("#", "")
            content = yaml.load(content)
            if content["jupyter"]["jupytext"]["text_representation"]["extension"] == ".py":
                return True
            return False
        except (KeyError, IndexError):
            return False

###### remote ###################################################

def py2local(path):
    """ download .py notebooks to local machine so they can be version controlled
    """
    # get filenames
    nbs = fab.run(f"find {path} -name *.ipynb").splitlines()
    nbs = [nb for nb in nbs if nb.find(".ipynb_checkpoints") < 0]
    pys = [os.path.splitext(nb)[0] + ".py" for nb in nbs]

    # get files
    fab.env.warn_only = True
    for py in pys:
        fab.get(py, py[len(path):])